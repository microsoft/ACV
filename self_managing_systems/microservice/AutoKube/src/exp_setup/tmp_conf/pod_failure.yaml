apiVersion: locust.io/v1
kind: LocustTest
metadata:
  name: locust.test
spec:
  image: locustio/locust:latest
  masterCommandSeed: --locustfile /lotest/src/traffic.py --host http://catalogue.sock-shop.svc.cluster.local
    --users 20 --spawn-rate 20 --headless --autostart
  workerCommandSeed: --locustfile /lotest/src/traffic.py
  workerReplicas: 1
  configMap: load-test-configmap
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: load-test-configmap
data:
  traffic.py: "import base64\nfrom locust import HttpUser, task, constant\nfrom random\
    \ import choice\n\nclass User(HttpUser):\n\n    wait_time = constant(1)\n\n  \
    \  @task \n    def load(self) -> None:\n        base64string = base64.b64encode(b'user:password').decode('utf-8').replace('\\\
    n', '')\n\n        headers = {\"Connection\": \"close\"}\n\n        catalogue_response\
    \ = self.client.get(\"/catalogue\", headers=headers).json()\n        category_item\
    \ = choice(catalogue)\n        item_id = category_item[\"id\"]\n\n        self.client.get(\"\
    /\", headers=headers)\n        # self.client.get(\"/login\", headers={\"Authorization\"\
    :\"Basic %s\" % base64string})\n        self.client.get(\"/category.html\", headers=headers)\n\
    \        self.client.get(f\"/detail.html?id={item_id}\", headers=headers)\n  \
    \      # self.client.delete(\"/cart\")\n        # self.client.post(\"/cart\",\
    \ json={\"id\": item_id, \"quantity\": 1})\n        # self.client.get(\"/basket.html\"\
    )\n        # self.client.post(\"/orders\")"
